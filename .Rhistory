regexpr(".", test)
attr(,"match.length")
regexpr(".", test)
attr(,"match.length")
attr(regexpr(".", test),"match.length")
attr(regexpr("[.]", test),"match.length")
attr(regexpr("^.", test),"match.length")
attr(regexpr(".", test,fixed=T),"match.length")
round(test, digits=2)
round(as.numeric(test), digits=2)
as.character(round(as.numeric(test), digits=0))
nchar(as.character(round(as.numeric(test), digits=0)))
nchar(test) - (nchar(as.character(round(as.numeric(test), digits=0))) + 1)
n.dp = nchar(test) - (nchar(as.character(round(as.numeric(test), digits=0))) + 1)
n.dp
1^-(n.dp+1)
1*10^-(n.dp+1)
5*10^-(n.dp+1)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
station
imageStation(station)
station$LON <- station$LONG
# get the precision
n.dp.lat = nchar(station$LAT) - (nchar(as.character(round(as.numeric(station$LAT),
digits=0))) + 1)
n.dp.lon = nchar(station$LON) - (nchar(as.character(round(as.numeric(station$LON),
digits=0))) + 1)
n.dp.lat
n.dp.lon
station$LAT.precision <- 5*10^-(n.dp.lat+1)
station$LON.precision <- 5*10^-(n.dp.lon+1)
LAT.precision
station$LAT.precision
station$LON.precision
LON - LON.precision
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
imageStation(station)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
imageStation(station)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
imageStation(station)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
imageStation(station)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
imageStation(station)
print(station.image)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
print(station.image)
imageStation(station)
PlotDataCountsByTimeInterval(counts = counts.year,
interval = "year")
source('~/Documents/projects/Rcode/SurfaceStationSummary/SurfaceStationSummary.R')
base.map <- CreateBaseMap(lat.range = lat.range,
long.range = long.range)
ggsave(file.path(data.dir,projectID,"maps","MapBase.png"),
plot = base.map,
scale = 1, width = 6,
height = 6, units = c("in"),
dpi = 300, limitsize = TRUE)
#  WORK THROUGH STATIONS ----
for (ID in stations$ID){
if (any(station.files$ID == ID,na.rm = TRUE)){
# load the data from those stations
obs <- LoadStationData(station.files = station.files[station.files$ID == ID,],
data.dir = data.dir)
# get the number of years of data from this station
stations$NYRS[stations$ID == ID] <- length(unique(obs$YR))
# work on this data if we have a decent amount
if (stations$NYRS[stations$ID == ID] >= year.min.count){
# create directorys for the data
dir.create(file.path(data.dir,projectID,"figures",ID),recursive = TRUE)
## station data
station <- stations[stations$ID == ID,]
# create an annotation
station$NOTE= paste(station$NAME,
" (USAF ", station$USAF, ", WBAN ", station$WBAN, ")\n",
station$LONG, " W, ", station$LAT, " N, elevation ",
station$ELEV, " m\n",
"From ",  min(year.range), " to ", max(year.range),
sep ="")
# MAPS ----
# retrieve an aerial image of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# create a map showing the location of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationLocation.png"),
plot = MapStations(lat.range = lat.range,
long.range = long.range,
base.map = base.map,
stations = station,
labels = TRUE),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# DATA ----
## show the time series of data for this data set ----
obs$Timestamp <- as.POSIXct(paste(obs$DATE," ",
sprintf("%02d", obs$HR),":",
sprintf("%02d", obs$MIN),
sep = ""),
tz ="GMT",
format = "%Y-%m-%d %H:%M")
# add a month
obs$B = factor(obs$M,
levels = 1:12,
labels = format(as.Date(paste("2012",1:12,"01",sep = "-")),
"%B",
tz = "GMT"),
ordered = TRUE)
# TIME SERIES OF OBSERVATIONS ----
obs.melt <- melt(obs,
id.vars = c("Timestamp"),
measure.vars = c("WIND.SPD","WIND.DIR","TEMP","ATM.PRES"))
# catch some problems that can occur if the entire time series is empty
if(all(is.na(obs.melt$value[obs.melt$variable == "WIND.SPD"]))){
obs.melt$value[obs.melt$variable == "WIND.SPD"] <- -999.99
}
if(all(is.na(obs.melt$value[obs.melt$variable == "WIND.DIR"]))){
obs.melt$value[obs.melt$variable == "WIND.DIR"] <- -999.99
}
if(all(is.na(obs.melt$value[obs.melt$variable == "TEMP"]))){
obs.melt$value[obs.melt$variable == "TEMP"] <- -999.99
}
if(all(is.na(obs.melt$value[obs.melt$variable == "ATM.PRES"]))){
obs.melt$value[obs.melt$variable == "ATM.PRES"] <- -999.99
}
try(ggsave(file.path(data.dir,projectID,"figures",ID,"AllDataTimeSeries.png"),
plot = ggplot(data = obs.melt,
aes(x = Timestamp)) +
geom_point(aes(y = value,
color = variable),
size = 0.5) +
scale_x_datetime(limits = as.POSIXct(year.range,tz = "GMT")) +
facet_wrap(~variable,
ncol = 1,
drop = FALSE,
scales = "free_y") +
guides(color=FALSE),
scale = 1,
width = 6, height = 4, units = c("in"),
dpi = 300, limitsize = TRUE))
## DATA AVAILABILTY ----
counts.year <- GetDataCountsByYear(obs)
try(ggsave(file.path(data.dir,projectID,"figures",ID,"DataCountByYear.png"),
plot = PlotDataCountsByTimeInterval(counts = counts.year,
interval = "year"),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
## WIND ROSES ----
# overall
try(ggsave(file.path(data.dir,projectID,"figures",ID,"WindRose.png"),
plot = plotWindrose(data = obs,
spd = "WIND.SPD",
dir = "WIND.DIR"),
scale = 1, width = 5,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# one for each month
try(ggsave(file.path(data.dir,projectID,"figures",ID,"WindRoseByMonth.png"),
plot = plotWindrose(data = obs,
spd = "WIND.SPD",
dir = "WIND.DIR",
opts = "facet_wrap(~B,drop = FALSE)"),
scale = 1, width = 6,
height = 4, units = c("in"),
dpi = 300, limitsize = TRUE))
## GENERATE CLIMATOLOGY ----
climatology <- getClimatologies(obs = obs,
year.min.count)
# PLOT CLIMATOLOGY ----
# temperature climatology
try(ggsave(file.path(data.dir,projectID,"figures",ID,"TemperatureClimatology.png"),
plot = plotClimatologies(climatology,
param = "TEMP"),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# wind speed climatology
try(ggsave(file.path(data.dir,projectID,"figures",ID,"WindSpdClimatology.png"),
plot = plotClimatologies(climatology,
param = "WIND.SPD"),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
## SAVE DATA ----
# observations
save(obs,
file = file.path(data.dir,projectID,"figures",ID,"Observations.RData"))
# data counts
save(counts.year,
file = file.path(data.dir,projectID,"figures",ID,"DataCounts.RData"))
# climatology
save(climatology,
file = file.path(data.dir,projectID,"figures",ID,"Climatology.RData"))
## REMOVE TEMPORARY STUFF ----
rm(station,obs, obs.melt, counts.year, climatology)
} # end of loop that only runs if we have good data
} else
{
# get the number of years of data from this station
stations$NYRS[stations$ID == ID] = 0
}
}
## CREATE SUMMARY DATA ----
# keep stations where we have at least n.years of observations:
stations.sub <- stations[((stations$NYRS >=year.min.count) & !is.na(stations$NYRS)), ]
## TEX FILES ----
# copy across the template report
file.copy(from = file.path(code.dir,"TexTemplates","StationOverview.tex"),
to = file.path(data.dir,projectID,"tex"))
# create a LaTeX table listing all of the stations
WriteStationInformationTable(stations.sub,
projectID,
data.dir,
country.code)
# create pages for each station
CreateStationSummaryPage(stations.sub,
data.dir,
projectID,
code.dir)
# create a list of pages for each station that we can embed in an overview LaTeX document
WriteStationInformationList(stations.sub,
projectID,
data.dir,
country.code)
## Map the stations ----
try(ggsave(file.path(data.dir,projectID,"maps","MapOfStationsByID.png"),
plot = MapStations(lat.range = lat.range,
long.range = long.range,
base.map = base.map,
stations = stations.sub,
labels = TRUE),
scale = 1,
width = 6,
height = 6, units = c("in"),
dpi = 300, limitsize = TRUE))
# Create and plot information about data coverage ----
# load all of the data count files
for (ID in stations.sub$ID){
load(file=file.path(data.dir,projectID,"figures",ID,"DataCounts.RData"))
counts.year$ID <- ID
if (ID == stations.sub$ID[1]){
counts.year.all <- counts.year
} else {
counts.year.all <- rbind(counts.year.all,
counts.year)
}
}
try(ggsave(file.path(data.dir,projectID,"figures","PlotOfDataCountByYear.png"),
plot = PlotDataCountsByYearByID(counts.year.all),
scale = 1,
width = 6,
height = 6, units = c("in"),
dpi = 300, limitsize = TRUE))
# map the counts by year
counts.map <- base.map %+% merge(stations.sub,
counts.year.all,
by = "ID") +
aes(x = LONG,
y = LAT)
ggsave(file.path(data.dir,projectID,"maps","MapOfDataCountByYear.png"),
plot = counts.map +
geom_point(aes(size=WIND.SPD.COUNT),
alpha = 0.5) +
facet_wrap(~YR) +
scale_size_continuous(name = "Wind Speed\nData Points") +
labs(x = "Longitude",
y = "Latitude") +
coord_map(),
scale = 1,
width = 6,
height = 6, units = c("in"),
dpi = 300, limitsize = TRUE)
# CLIMATOLOGY ----
for (ID in stations.sub$ID){
load(file=file.path(data.dir,projectID,"figures",ID,"Climatology.RData"))
climatology$ID <- ID
if (ID == stations.sub$ID[1]){
climatology.all <- climatology
} else {
climatology.all <- rbind(climatology.all,
climatology)
}
}
# bin the data
climatology.all$WIND.SPD.mean.mean.binned <- cut(climatology.all$WIND.SPD.mean.mean,
breaks = c(seq(0,20,2)),
labels = paste(seq(0,18,2),
"-",
seq(2,20,2)))
climatology.all$WIND.SPD.max.max.binned <- cut(climatology.all$WIND.SPD.max.max,
breaks = c(seq(0,20,5),30,40,50),
labels = c(paste(seq(0,15,5),
"-",
seq(5,20,5)),
"20 - 30","30 - 40","40 - 50"))
# Map statistics about the stations ----
# create the map we'll need
climatology.map <- base.map %+%
merge(stations.sub,
climatology.all,
by = "ID") +
aes(x = LONG, y = LAT)
# mean wind speed
climatology.monthly.mean.wind.spd.map <- climatology.map +
geom_point(aes(color = WIND.SPD.mean.mean.binned)) +
facet_wrap(~B) +
scale_colour_manual(name = "Wind Speed\n(Mean daily-mean)",
labels = paste(seq(0,18,2),
"-",
seq(2,20,2)),
values = colorRampPalette(brewer.pal(7,"YlOrRd"))(10)) +
labs(x = "Longitude",
y = "Latitude") +
coord_map()
print(climatology.monthly.mean.wind.spd.map)
ggsave(file.path(data.dir,projectID,"maps","MapMonthlyMeanWindSpeed.png"),
plot = climatology.monthly.mean.wind.spd.map,
scale = 1,
width = 6,
height = 4, units = c("in"),
dpi = 300, limitsize = TRUE)
# maximum wind speed
climatology.monthly.max.wind.spd.map <- climatology.map +
geom_point(aes(color = WIND.SPD.max.max.binned)) +
facet_wrap(~B) +
scale_colour_manual(name = "Wind Speed\n(maximum)",
labels = c(paste(seq(0,15,5),
"-",
seq(5,20,5)),
"20 - 30","30 - 40","40-50"),
values = c(colorRampPalette(brewer.pal(7,"YlOrRd"))(4),
colorRampPalette(brewer.pal(3,"RdPu"))(3))) +
labs(x = "Longitude",
y = "Latitude") +
coord_map()
print(climatology.monthly.max.wind.spd.map)
ggsave(file.path(data.dir,projectID,"maps","MapMonthlyMaximumWindSpeed.PNG"),
plot = climatology.monthly.max.wind.spd.map,
scale = 1,
width = 6,
height = 4, units = c("in"),
dpi = 300, limitsize = TRUE)
## PLOT ALL CLIMATOLOGIES TOGETHER
# temperature
plot.temperature.climatology <- plotTEMPClimatology(climatology.all) + facet_wrap(~ID)
print(plot.temperature.climatology)
ggsave(file.path(data.dir,projectID,"figures","PlotOfTemperatureClimatology.png"),
plot = plot.temperature.climatology,
scale = 1,
width = 6,
height = 6, units = c("in"),
dpi = 300, limitsize = TRUE)
# wind speed
plot.wind.speed.climatology <- plotWINDSPDClimatology(climatology.all) + facet_wrap(~ID)
print(plot.wind.speed.climatology)
ggsave(file.path(data.dir,projectID,"figures","PlotOfWindSpeedClimatology.png"),
plot = plot.wind.speed.climatology,
scale = 1,
width = 6,
height = 6, units = c("in"),
dpi = 300, limitsize = TRUE)
# Create daily data (we'll need this for monthly values, later)
#source(file.path(code.dir,"scripts","GetDailyDataStatistics.R"))
# create monthly data
#source(file.path(code.dir,"scripts","GetMonthlyDataStatistics.R"))
#source(file.path(code.dir,"scripts","PlotMonthlyDataStatistics.R"))
#source(file.path(code.dir,"scripts","GetMonthlyDataCorrelations.R"))
#source(file.path(code.dir,"scripts","MapMonthlyDataCorrelations.R"))
# Create climatologies
#source(file.path(code.dir,"scripts","GetMonthlyClimatology.R"))
#source(file.path(code.dir,"scripts","PlotMonthlyClimatology.R"))
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
for (ID in stations.sub$ID){
# retrieve an aerial image of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(stations.sub),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# create a map showing the location of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationLocation.png"),
plot = MapStations(lat.range = lat.range,
long.range = long.range,
base.map = base.map,
stations = stations.sub,
labels = TRUE),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
}
imageStation(stations.sub)
station <- stations[stations$ID == ID,]
imageStation(station)
for (ID in stations.sub$ID){
station <- stations[stations$ID == ID,]
# retrieve an aerial image of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# create a map showing the location of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationLocation.png"),
plot = MapStations(lat.range = lat.range,
long.range = long.range,
base.map = base.map,
stations = station,
labels = TRUE),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
}
ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE)
ID
data.dir
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE)
character(3)
as.character(3)
source('~/.active-rstudio-document')
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE)
?switch
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE)
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE)
for (ID in stations.sub$ID){
station <- stations[stations$ID == ID,]
# retrieve an aerial image of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# create a map showing the location of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationLocation.png"),
plot = MapStations(lat.range = lat.range,
long.range = long.range,
base.map = base.map,
stations = station,
labels = TRUE),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
}
?get_map
source('~/Documents/projects/Rcode/SurfaceStationSummary/functions/ImageStations.R')
for (ID in stations.sub$ID){
station <- stations[stations$ID == ID,]
# retrieve an aerial image of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationImage.png"),
plot = imageStation(station),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
# create a map showing the location of the station
try(ggsave(file.path(data.dir,projectID,"figures",ID,"StationLocation.png"),
plot = MapStations(lat.range = lat.range,
long.range = long.range,
base.map = base.map,
stations = station,
labels = TRUE),
scale = 1,
width = 3,
height = 3, units = c("in"),
dpi = 300, limitsize = TRUE))
}
